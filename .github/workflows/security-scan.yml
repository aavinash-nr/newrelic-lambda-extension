name: Security Scan

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      # Required for uploading SARIF results
      security-events: write
      # Required for checking out the code
      contents: read
      # Required for posting PR comments
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache-dependency-path: |
            go.sum

      - name: Build extension
        run: make build

      - name: Download Go modules
        run: go mod download

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        id: trivy_scan
        with:
          scan-type: 'fs'
          scan-ref: '.'
          # Generate multiple report formats
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          # Also generate a table for easy viewing in logs and PR comments
          list-all-pkgs: true
          # Fail the build if vulnerabilities are found (exit-code: 1)
          # We use continue-on-error to allow subsequent steps to run.
          exit-code: '1'
          # Ignore vulnerabilities that don't have a fix yet
          ignore-unfixed: true
          # Define the severities to scan for
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          # Define which scanners to use
          scanners: 'vuln,secret,config'
          # Directories to skip
          skip-dirs: 'examples'
        # Allow the workflow to continue even if Trivy finds issues,
        # so we can perform actions like uploading results and commenting on PRs.
        continue-on-error: true

      - name: Upload Trivy SARIF report to GitHub Security tab
        # Upload the SARIF file to the GitHub Security tab
        # This runs for pushes to main, pull requests, and scheduled runs.
        if: always() # Run this step even if the previous one failed
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Comment on PR with Trivy results
        # This step only runs for pull request events.
        if: ${{ github.event_name == 'pull_request' && steps.trivy_scan.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { readFileSync } = require('fs');
            const results = readFileSync('trivy-results.sarif', 'utf8');
            const commentBody = `## üîí Trivy Security Scan Results

            ‚ö†Ô∏è **Vulnerabilities have been detected in this pull request.**

            Please review the findings in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning) for more details.

            <details>
            <summary>Click to view Trivy Scan Summary</summary>

            \`\`\`json
            ${results}
            \`\`\`

            </details>
            `;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Fail workflow if vulnerabilities were found
        # This is the final step that will fail the check if the Trivy scan failed.
        if: ${{ steps.trivy_scan.outcome == 'failure' }}
        run: |
          echo "‚ùå Trivy detected security vulnerabilities!"
          echo "Please review the scan results and address the issues."
          exit 1
